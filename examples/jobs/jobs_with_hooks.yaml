# This is an example of jobs with hooks
# Hooks are special "global" jobs that are executed
#
# Current available hooks are:
#   - before_all
#   - after_all
#   - after_job
#   - before_job
#   - on_error
#
# In the example below, you see that
# - we have a job that throws an exception
# - this means, hook on_error `hello_world_failure` will get executed
# - simultanesly, job `hello` will get executed
# - `hello_world_success` and `hello_world_failure` jobs are
#   disabled, that means that they will not get executed
#   as normal jobs; however, you can reference them in other
#   jobs.
# - lastly `after_all` hook will get executed

jobs:
  - id: just_throwing_exceptions
    name: Exception Thrower üêß
    plugin: exception
    params:
      message: "Well, this isnt good, right?"

  - id: hello
    name: Hello World Job
    plugin: echo
    params:
      message: "Hello, World!"

  - id: hello_world_success
    enabled: false
    name: Hello world Success Job
    plugin: notifier
    params:
      message: "We succeeded!"

  - id: hello_world_failure
    enabled: false
    name: Hello world Failure Job
    plugin: notifier
    params:
      message: "We failed!"

  - id: hello_before_job
    enabled: false
    name: BEFORE JOB
    plugin: echo
    params:
      message: "before_job: %JOB_ID%!"

  - id: hello_after_job
    enabled: false
    name: AFTER JOB
    plugin: echo
    params:
      message: "after_job: %JOB_ID%!"

hooks:
  after_all:
    - hello_world_success
  on_error:
    - hello_world_failure
  before_job:
    - hello_before_job
  after_job:
    - hello_after_job
